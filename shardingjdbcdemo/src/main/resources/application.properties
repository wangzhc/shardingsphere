mybatis.mapper-locations=classpath:/mybatis/*.xml
logging.config = classpath:logback.xml

sharding.jdbc.datasource.names=db0,db1

sharding.jdbc.datasource.db0.type=com.alibaba.druid.pool.DruidDataSource
sharding.jdbc.datasource.db0.driver-class-name=com.mysql.jdbc.Driver
sharding.jdbc.datasource.db0.url=jdbc:mysql://192.168.0.247:3306/db0?useUnicode=true&characterEncoding=utf8&autoReconnect=true&allowMultiQueries=true&zeroDateTimeBehavior=convertToNull
sharding.jdbc.datasource.db0.username=root
sharding.jdbc.datasource.db0.password=dafy1024

sharding.jdbc.datasource.db1.type=com.alibaba.druid.pool.DruidDataSource
sharding.jdbc.datasource.db1.driver-class-name=com.mysql.jdbc.Driver
sharding.jdbc.datasource.db1.url=jdbc:mysql://192.168.0.247:3306/db1?useUnicode=true&characterEncoding=utf8&autoReconnect=true&allowMultiQueries=true&zeroDateTimeBehavior=convertToNull
sharding.jdbc.datasource.db1.username=root
sharding.jdbc.datasource.db1.password=dafy1024

#未配置分片规则的表将通过默认数据源定位
sharding.jdbc.config.sharding.default-data-source-name=db0
#默认数据库分片策略，同分库策略
#sharding.jdbc.config.sharding.default-database-strategy.none.any=
#默认表分片策略，同分表策略
#sharding.jdbc.config.sharding.default-table-strategy.none.any=
#test: 行表达式分片策略(InlineShardingStrategy)
#Inline表达式分片策略。使用Groovy的Inline表达式，提供对SQL语句中的=和IN的分片操作支持。
#InlineShardingStrategy只支持单分片键，对于简单的分片算法，可以通过简单的配置使用，从而避免繁琐的Java代码开发，
#如: tuser${user_id % 8} 表示t_user表按照user_id按8取模分成8个表，表名称为t_user_0到t_user_7。
#sharding.jdbc.config.sharding.default-database-strategy.inline.sharding-column=user_id
#sharding.jdbc.config.sharding.default-database-strategy.inline.algorithm-expression=db$->{user_id % 2}


sharding.jdbc.config.sharding.tables.user.logic-table=user
sharding.jdbc.config.sharding.tables.user.database-strategy.inline.sharding-column=user_id
sharding.jdbc.config.sharding.tables.user.database-strategy.inline.algorithm-expression=db$->{user_id % 2}
#由数据源名 + 表名组成，以小数点分隔。
#多个表以逗号分隔，支持inline表达式。缺省表示使用已知数据源与逻辑表名称生成数据节点。
#用于广播表（即每个库中都需要一个同样的表用于关联查询，多为字典表）或只分库不分表且所有库的表结构完全一致的情况
sharding.jdbc.config.sharding.tables.user.actual-data-nodes=db$->{0..1}.user
sharding.jdbc.config.sharding.tables.user.key-generator-class-name=io.shardingsphere.core.keygen.DefaultKeyGenerator


###用于单分片键的标准分片场景
sharding.jdbc.config.sharding.tables.order.logic-table=order
#db$->{0..1}.order_${2018}${['08','09']}
#db$->{0..1}.order_00${0..9}
#db$->{0..1}.order_00${0..9},db$->{0..1}.order_01${0..9}
#db0.order_00${0..2}
sharding.jdbc.config.sharding.tables.order.actual-data-nodes=db$->{0..1}.order_${2019}${['03','04']}
sharding.jdbc.config.sharding.tables.order.database-strategy.inline.sharding-column=user_id
sharding.jdbc.config.sharding.tables.order.database-strategy.inline.algorithm-expression=db$->{user_id % 2}
#分片列名称
sharding.jdbc.config.sharding.tables.order.table-strategy.standard.sharding-column=order_id
#精确分片算法类名称，用于=和IN。该类需实现PreciseShardingAlgorithm接口并提供无参数的构造器
sharding.jdbc.config.sharding.tables.order.table-strategy.standard.precise-algorithm-class-name=com.example.shardingsphere.precise.OrderShardingAlgorithm
#范围分片算法类名称，用于BETWEEN，可选。该类需实现RangeShardingAlgorithm接口并提供无参数的构造器
#sharding.jdbc.config.sharding.tables.order.table-strategy.standard.range-algorithm-class-name=
#自增列名称，缺省表示不使用自增主键生成器
sharding.jdbc.config.sharding.tables.order.key-generator-column-name=order_id
#自增列值生成器类名称，缺省表示使用默认自增列值生成器。该类需提供无参数的构造器
sharding.jdbc.config.sharding.tables.order.key-generator-class-name=io.shardingsphere.core.keygen.DefaultKeyGenerator

sharding.jdbc.config.sharding.tables.order_item.logic-table=order_item
sharding.jdbc.config.sharding.tables.order_item.actual-data-nodes=db$->{0..1}.order_item_${2019}${['03','04']}
sharding.jdbc.config.sharding.tables.order_item.database-strategy.inline.sharding-column=user_id
sharding.jdbc.config.sharding.tables.order_item.database-strategy.inline.algorithm-expression=db$->{user_id % 2}
sharding.jdbc.config.sharding.tables.order_item.table-strategy.standard.sharding-column=order_id
sharding.jdbc.config.sharding.tables.order_item.table-strategy.standard.precise-algorithm-class-name=com.example.shardingsphere.precise.OrderShardingAlgorithm
#sharding.jdbc.config.sharding.tables.order_item.table-strategy.standard.range-algorithm-class-name=
sharding.jdbc.config.sharding.tables.order_item.key-generator-column-name=order_item_id
sharding.jdbc.config.sharding.tables.order_item.key-generator-class-name=io.shardingsphere.core.keygen.DefaultKeyGenerator

#t_order表和t_order_item表，均按照order_id分片，则此两张表互为绑定表关系。绑定表之间的多表关联查询不会出现笛卡尔积关联，关联查询效率将大大提升。
sharding.jdbc.config.sharding.binding-tables[0]=order, order_item

#test: 特殊账户(StandardShardingStrategy)
sharding.jdbc.config.sharding.tables.trade.logic-table=trade
sharding.jdbc.config.sharding.tables.trade.actual-data-nodes=db${0..1}.trade_${0..2},db${0..1}.trade_company
sharding.jdbc.config.sharding.tables.trade.table-strategy.standard.sharding-column=user_id
sharding.jdbc.config.sharding.tables.trade.database-strategy.inline.sharding-column=user_id
sharding.jdbc.config.sharding.tables.trade.database-strategy.inline.algorithm-expression=db$->{user_id % 2}
sharding.jdbc.config.sharding.tables.trade.table-strategy.standard.precise-algorithm-class-name=com.example.shardingsphere.precise.TradeShardingAlgorithm
sharding.jdbc.config.sharding.tables.trade.table-strategy.standard.range-algorithm-class-name=com.example.shardingsphere.precise.TradeRangeShardingAlgorithm
sharding.jdbc.config.sharding.tables.trade.key-generator-column-name=id
sharding.jdbc.config.sharding.tables.trade.key-generator-class-name=io.shardingsphere.core.keygen.DefaultKeyGenerator

#test: 复合分片策略(ComplexShardingStrategy)
#sharding.jdbc.config.sharding.tables.trade.logic-table=trade
#sharding.jdbc.config.sharding.tables.trade.actual-data-nodes=db${0..1}.trade_${0..2}
#库复合分片策略
#sharding.jdbc.config.sharding.tables.trade.database-strategy.complex.sharding-columns=user_id, id
#sharding.jdbc.config.sharding.tables.trade.database-strategy.complex.algorithm-class-name=com.example.shardingsphere.precise.TradeComplexShardingAlgorithm
#表复合分片策略
#sharding.jdbc.config.sharding.tables.trade.table-strategy.complex.sharding-columns=user_id, id
#sharding.jdbc.config.sharding.tables.trade.table-strategy.complex.algorithm-class-name=com.example.shardingsphere.precise.TradeComplexShardingAlgorithm
#sharding.jdbc.config.sharding.tables.trade.key-generator-column-name=id

#test: 通过Hint而非SQL解析的方式分片的策略(HintShardingStrategy) 暂不能使用，有BUG
#io.shardingsphere.core.routing.type.standard.StandardRoutingEngine.routeTables
#sharding.jdbc.config.sharding.tables.trade.logic-table=trade
#sharding.jdbc.config.sharding.tables.trade.actual-data-nodes=db${0..1}.trade_${0..2}
#sharding.jdbc.config.sharding.tables.trade.database-strategy.hint..algorithm-class-name=com.example.shardingsphere.precise.TestHintShardingAlgorithm
#sharding.jdbc.config.sharding.tables.trade.table-strategy.hint.algorithm-class-name=com.example.shardingsphere.precise.TestHintShardingAlgorithm
#sharding.jdbc.config.sharding.tables.trade.key-generator-column-name=id
#sharding.jdbc.config.sharding.tables.trade.key-generator-class-name=io.shardingsphere.core.keygen.DefaultKeyGenerator

#test: 不分片策略(NoneShardingStrategy)
